# -*- coding: utf-8 -*-
"""Tesla stock price .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TAb_5tULXVqR44wxrpvRiMMEe6HPIGEt

# **stcok price prediction** 

---

##importing dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import datetime
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error,r2_score
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

"""## load dataset"""

Tesla=pd.read_csv("Tesla.csv - Tesla.csv.csv", index_col="Date", parse_dates=True)

Tesla.head(20)

"""## analyzing data"""

Tesla.describe()

Tesla.info()              #only volumn column is of int data type

Tesla['Volume']=Tesla['Volume'].astype(float)

Tesla.info()           #column of adj close is having same values as close so it is not of much use

Tesla.shape

Tesla.hist(bins=50, figsize=(12,8))

Tesla['Open'].plot(figsize=(16,6))

Tesla.isnull().sum()

corr_matrix=Tesla.corr()
corr_matrix['Close'].sort_values(ascending=False)              #this shows that volume fearure has least effect on the value of close price

Tesla.rolling(7).mean().head(20)                            #used to get average of last 7 days

Tesla['Open'].plot(figsize=(16,6))
Tesla['Close'].plot()                           #plotting close price with open price

Tesla.rolling(window=30).mean()['Close'].plot(figsize=(16,6))
Tesla['Open'].plot()                                  #plotting average of last 30 days of close to actual price of open

Tesla['Close'].plot(figsize=(16,6))
Tesla.rolling(window=30).mean()['Close'].plot()                  #plotting actual closing price with average of last 30 days of close price

Tesla['Close'].expanding(min_periods=1).mean().plot(figsize=(16,6))

"""##splitting data - train set and test set"""

X = Tesla.drop('Close',axis=1)
y = Tesla['Close'].copy()

X_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.2, random_state=4)

print(f"rows in train set {len(X_train)}\n rows in test set {len(y_test)}\n")

"""##model designing"""

X_train=np.array(X_train)
X_test=np.array(X_test)
y_train=np.array(y_train)
y_test=np.array(y_test)

model = LinearRegression()
#model = DecisionTreeRegressor()
#model = RandomForestRegressor()
model.fit(X_train, y_train)

#scaler=MinMaxScaler(feature_range=(-1,1))
#train_sc = scaler.fit_transform(X.values.reshape(-1,1))
#test_sc = scaler.transform(Y.values.reshape(-1,1))
#train_sc

"""##evaluating the model"""

y_test=pd.DataFrame(y_test)
y_test.head()

y_pred=model.predict(X_test)
y_pred=pd.DataFrame(y_pred)
y_pred.head()

mse=mean_squared_error(y_test,y_pred)
print("mean squared error",mse)
print('Coefficient of determination:', r2_score(y_test, y_pred))

"""linear :-

  mean squared error 1.6083798487286338

  Coefficient of determination: 0.9998231613365195

decision tree:-

  mean squared error 5.081394152651037

  Coefficient of determination: 0.9994413092458958

randomforest regressor:-

  mean squared error 3.154977022278141
  
  Coefficient of determination: 0.9996531155744258
"""